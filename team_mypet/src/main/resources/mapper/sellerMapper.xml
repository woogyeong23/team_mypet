<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace = "com.jeonju.mypet.seller">

	<select id="getSellerProductList" resultType="Hashmap">
		select p.*, sum(detail_cnt) as sales, e.p_ori_filename, e.p_sys_filename
					from
						(select a.p_idx, a.p_name, p_price, p_discount, p_disprice, p_wday, p_modifyday, p_size, p_status, b.p_category_idx, p_category_large, p_category_small,
						ifnull(avg(review_stars),0) as avg_reviews_stars, count(review_stars) as cnt_reviews
						from product a  join p_category b on a.p_category_idx = b.p_category_idx left join review c on a.p_idx = c.p_idx
						where a.p_idx in (select p_idx from product where seller_idx=(select seller_idx from sellerstory where midx=#{member_id}))
						group by a.p_idx)
					as p left join detail d on p.p_idx = d.p_idx  join product_img e on p.p_idx=e.p_idx
					where p.p_idx in (select p_idx from product where seller_idx=(select seller_idx from sellerstory where midx=#{member_id}))
			<if  test="searching == 'searchTotal'">
					and (p.p_idx like CONCAT('%',#{keyword},'%') or p_name like CONCAT('%',#{keyword},'%'))
			</if>
			<if  test="searching == 'searchName' ">
					and p_name like  CONCAT('%',#{keyword},'%')
			</if>
			<if  test="searching == 'searchNum' ">
					and p.p_idx like CONCAT('%',#{keyword},'%')
			</if>

			
			<choose>
				<when test="status=='00'">
				</when>
				<otherwise>
					and p.p_status=#{status}
				</otherwise>
			</choose>
			
			<choose>
				<when test="category=='00'">
					and (p_category_large=1 or p_category_large=2)
				</when>
				<when test="category=='01'">
					and p_category_large=1
				</when>
				<when test="category=='02'">
					and p_category_large=2
				</when>
				<otherwise>
					and p_category_idx=#{category}
				</otherwise>
			</choose>
					group by p.p_idx
					
			<choose>
				<when test="sorting=='newest'">
					order by p.p_wday desc
				</when>
				<when test="sorting=='sales'">
					order by sales desc
				</when>
				<when test="sorting=='highPrice'">
					order by p.p_disprice desc
				</when>
				<when test="sorting=='lowPrice'">
					order by p.p_disprice asc
				</when>
				<when test="sorting=='reviews'">
					order by p.cnt_reviews desc
				</when>
				<when test="sorting=='stars'">
					order by p.avg_reviews_stars desc
				</when>
			</choose>
	</select>
	<select id="getSellerProductDetail" parameterType="string" resultType="productVo">
		select * from product where p_idx=#{p_idx}
	</select>
	<select id="getSellerProductImgs" parameterType="string" resultType="product_imgVo">
		select * from product_img where p_idx=#{p_idx}
	</select>
	<select id="checkPName" parameterType="string" resultType="int">
		select count(*) from product where p_name = #{p_name}
	</select>
	<select id="checkId" parameterType="string" resultType="int">
		select count(*) from spring_member where member_id=#{member_id}
	</select>
	<!-- 동적 SQL문으로 처리: choose-when-otherwise 구문 -->
	<insert id="addProduct" parameterType="map">
		
		INSERT INTO product(seller_idx,p_category_idx,p_name,p_content,p_price,p_discount,p_disprice,p_cancle_info,p_ingerdient,p_dvprice,p_dvcompany,p_limit_cnt,p_point,p_add_dvprice,p_free_dvprice,p_size,p_status,p_stock)
		 VALUES( #{seller_idx}, #{p_category_idx},#{p_name},#{p_content},#{p_price},#{p_discount},#{p_disprice},#{p_cancle_info},#{p_ingerdient},#{p_dvprice},#{p_dvcompany},#{p_limit_cnt},#{p_point},#{p_add_dvprice},#{p_free_dvprice},#{p_size},0,#{p_stock})

			
	</insert>
	
	<select id="getPIdx" resultType="int">
		select max(p_idx) as p_idx from product
	</select>
	<select id="getSellerIdx" resultType="String">
		select seller_idx
		from members a join sellerstory b on a.midx=b.midx
		where a.midx=#{member_id}
	</select>
	<insert id="addProductImg" parameterType="map">
		
		INSERT INTO product_img(p_idx,p_ori_filename,p_sys_filename)
 		 VALUES(#{p_idx},#{p_ori_fileName},#{p_sys_fileName})
		
			
	</insert>
	
	<select id="getSellerProductVoList" parameterType="string" resultType="productVo">
		select p_idx, p_name, p_dvprice
		from product
		where seller_idx = (select seller_idx from sellerstory where midx=#{member_id})
	</select>
	
	<select id="getSellerOrdersList" resultType="ordersVo">
		
		select orders.*, m_name, m_id, members.midx
						from orders  join members on orders.midx=members.midx
						where orders_idx in (select DISTINCT c.orders_idx
											from product a join detail b on a.p_idx=b.p_idx join orders c on b.orders_idx=c.orders_idx 
													join members d on c.midx=d.midx join (select *
													from (select *, RANK() OVER (PARTITION BY detail_idx ORDER BY detail_status desc) AS num
													from detail_day ) a
													where a.num=1) e on b.detail_idx=e.detail_idx
											where a.seller_idx = (select midx from sellerstory where midx=#{member_id})
											
											<choose>
												<when test="product=='00'">
												</when>
												<otherwise>
													
													<if test="status!='00'">
														<if test="product!='00'">
															and a.p_idx=#{product} and e.detail_status=#{status}
														</if>
													</if>
													<if test="status=='00'">
														<if test="product!='00'">
															and a.p_idx=#{product}
														</if>
													</if>
												</otherwise>
											</choose>
											)
											
											
											
											
		<if  test="searching == 'searchTotal'">
			and (m_name like CONCAT('%',#{keyword},'%') or m_id like CONCAT('%',#{keyword},'%'))
		</if>
		<if  test="searching == 'searchName' ">
			and m_name like  CONCAT('%',#{keyword},'%')
		</if>
		<if  test="searching == 'searchEmail' ">
			and m_id like CONCAT('%',#{keyword},'%')
		</if>

			
		
			<if test="status!='00'">
				<if test="product=='00'">
					and orders.orders_status=#{status}
				</if>
			</if>
		 
		
	
	<!-- 
		select orderlist.*
		from (select t.*,  RANK() OVER (PARTITION BY detail_idx ORDER BY detail_status desc) AS num
				from (	select a.seller_idx, a.p_idx, p_name, b.detail_idx, detail_status, fixprice, orders_day,c.orders_idx, c.midx, d.m_name, d.m_id
						from product a join detail b on a.p_idx=b.p_idx join orders c on b.orders_idx=c.orders_idx join members d on c.midx=d.midx join detail_day e on b.detail_idx=e.detail_idx
						where a.seller_idx = (select midx from sellerstory where midx=#{member_id})
						order by orders_day desc ) t ) orderlist
		where num=1
	
			<if  test="searching == 'searchTotal'">
					and (m_name like CONCAT('%',#{keyword},'%') or m_id like CONCAT('%',#{keyword},'%'))
			</if>
			<if  test="searching == 'searchName' ">
					and m_name like  CONCAT('%',#{keyword},'%')
			</if>
			<if  test="searching == 'searchEmail' ">
					and m_id like CONCAT('%',#{keyword},'%')
			</if>

			
			<choose>
				<when test="status=='00'">
				</when>
				<otherwise>
					and detail_status=#{status}
				</otherwise>
			</choose>
			
			<choose>
				<when test="product=='00'">
				</when>
				<otherwise>
					and p_idx=#{product}
				</otherwise>
			</choose>
	-->			
	</select>
	
	<select id="getSellerDetailVoList" resultType="detailVo">
		select *
		from (select a.seller_idx, b.fixdvprice, a.p_idx, a.p_name, b.detail_idx, c.detail_status , RANK() OVER (PARTITION BY detail_idx ORDER BY detail_status desc) AS num
			from product a join detail b on a.p_idx=b.p_idx join detail_day c on b.detail_idx=c.detail_idx
			where b.orders_idx=#{orders_idx}) t
		where t.num=1 and t.seller_idx = (select midx from sellerstory where midx=#{member_id})

					
	</select>
	<select id="getSellerOrdersPrice" resultType="String">
		select sum(b.fixprice) as bundleprice
		from orders a join detail b on a.orders_idx=b.orders_idx join product c on b.p_idx=c.p_idx
		where a.orders_idx=#{orders_idx} and c.seller_idx = (select midx from sellerstory where midx=#{member_id})
					
	</select>
	
	
	<select id="getSellerDetailDayListVo" parameterType="string" resultType="detail_dayVo">
		select *
		from detail_day
		where detail_idx=#{detail_idx}

	</select>
	
	<select id="getSellerRefundDayListVo" parameterType="string" resultType="refund_dayVo">
		select *
		from refund_day
		where detail_idx=#{detail_idx}

	</select>
	
	<select id="getSellerCancleDayListVo" parameterType="string" resultType="cancle_dayVo">
		select *
		from cancle_day
		where detail_idx=#{detail_idx}

	</select>
	
	<select id="getSellerReviewVo" parameterType="string" resultType="reviewVo">
		select *
		from review
		where detail_idx=#{detail_idx}

	</select>
	<select id="getSellerOrdersContent" resultType="Hashmap">
		select a.*, b.*, c.*, d.m_name, d.m_id, f.p_sys_filename
		from product a join detail b on a.p_idx=b.p_idx join orders c on b.orders_idx=c.orders_idx join members d on c.midx=d.midx join detail_day e on b.detail_idx=e.detail_idx join product_img f on a.p_idx=f.p_idx
		where b.detail_idx=#{detail_idx}
		order by detail_status desc limit 0,1

					
	</select>
	
	
	<select id="seller_ordersMap" resultType="Hashmap">
		select a.orders_idx, b.m_name, b.m_id, a.orders_status, a.orders_day
		from orders  a join members b on a.midx=b.midx
		where a.orders_idx=#{orders_idx} and a.midx=#{member_id}

					
	</select>
	
	<select id="getSeller_profile" resultType="sellerStoryVo">
		select b.*
		from members a join sellerstory b on a.midx=b.midx
		where a.midx=#{member_id}
					
	</select>
	
	<update id="updateSellerAccount" parameterType="sellerStoryVo">
	update sellerstory set seller_bank=#{seller_bank}, seller_account_number=#{seller_account_number}
	 where midx=#{midx}
	</update>
	
	
	
	
	
	
</mapper>